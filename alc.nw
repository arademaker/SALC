
\title{A naive implementation of a Sequent Calculus for $\mathcal{ALC}$ in Maude}
\author{Alexandre Rademaker}
\maketitle

\begin{abstract} 
  This is an exercise about how could be an implementation of a
  sequent calculos in Maude. Maude most used features here are pattern
  matching for definition of functions, data and program as terms, the
  easy way to implement ``possible proofs'' using rules, search and
  rewrites.
\end{abstract}


\section{Introduction}

The main motivation to implement the system described here is my need
to exercise the deduction system $S_{\mathcal{ALC}}$.

\section{The Implementation}

The first step was to implement the language. If I was thinking about
a generic theorem prover, I would have started from the common
infrastructure for a sequent calculus reasoner. However, since my
purpose was to archive my results quickly, I choose to start from the
language definition.

<<alc-language.maude>>=
fmod ALC-SYNTAX is 
 sorts AConcept Concept ARole Role .
 subsort AConcept < Concept .
 subsort ARole < Role .

 ops ALL EXIST : Role Concept -> Concept .
 ops CTRUE CFALSE : -> Concept .
 op _&_ : Concept Concept -> Concept [gather (e E) prec 31] .
 op _|_ : Concept Concept -> Concept [gather (e E) prec 32] .
 op ~_  : Concept -> Concept [prec 30] .
endfm

@ 

The system is a labeled sequent calculus. So that, we had actually to
deal with two different languages. The first one, the traditional
$\mathcal{ALC}$. The second one, the extended syntax to labels. Since
Maude as developed for formal analysis and verification, based in a
well studied formalism called Rewriting Logic, its support for modular
specification is more formal and verbose than usual. To be able to use
the available Maude implementations of lists and sets, I had to first
create a [[View]] that maps one of my types to the generic type
[[Elt]] used as parameter in the definition of all Maude default
structure data types.

<<alc-language.maude>>=
fmod LABEL is 
 inc ALC-SYNTAX .

 sort Label .
 subsort Role < Label .
endfm

view Label from TRIV to LABEL is 
 sort Elt to Label .
endv

@

Once I have the list of labels, I am finally ready to define the type
and constructor of labeled concepts.

<<alc-language.maude>>=
fmod LALC-SYNTAX is 
 inc LABEL .
 inc LIST{Label} .

 op s : Role List{Label} -> Label .

 vars R : Role .
 eq s(R, nil) = R .

 sort LConcept .
 op <_|_|_> : List{Label} Concept List{Label} -> LConcept [ctor] . 
endfm

@

We must define an auxiliar module to handle negation of concepts. We
need a function to invert and flip the list of labels of a labeled
concept. That is

<<alc-language.maude>>=
fmod LALC-AUX is 
 inc LALC-SYNTAX .

 op join : List{Label} List{Label} Concept -> Concept .
 op invert : Concept -> Concept .
 op split : Concept -> LConcept .
 op neg : List{Label} List{Label} -> LConcept .
 
 vars L1 L2 L : List{Label} .
 vars R S : Role .
 vars C : Concept .
 
 eq neg(L1, L2) = split(invert(join(L1,L2, CTRUE))) .

 eq join(L1,  s(R,L1) L2, C)   = join(L1, L2, EXIST(R,C)) .  
 eq join(nil, R L2, C)   = join(nil, L2, EXIST(R,C)) . 
 
 --- eq join(L1 R, s(S,L1) L2, C) = join(L1, s(S,L1) L2, ALL(R,C)) . 
 --- eq join(L1 R, S L2, C) = join(L1, S L2, ALL(R,C)) . 
 eq join(L1 R, L2, C) = join(L1, L2, ALL(R,C)) [owise] . 
 eq join(nil, nil, C) = C .
 
 eq invert(ALL(R, C))   = EXIST(R, invert(C)) .
 eq invert(EXIST(R, C)) = ALL(R, invert(C)) .
 eq invert(C) = C [owise] .
 
endfm

@

Given the above definitions, we can now test if the language is well
defined. We create a test module with some atomic concepts and roles
to be able to write a labelled concept.

<<alc-test.maude>>=
in alc-language.maude

fmod TESTE is
 inc LALC-AUX .

 ops A B C D E : -> AConcept .
 ops R S T U V : -> ARole .
endfm

red < R S | ALL(R, A & ~ B) | s(V, R S) T S > . 

@ 

\subsection{The Sequent Calculus}

We again defined a [[view]] over the [[TRIV]] module so that we can
easly define sets of labeled concepts.

<<alc-system.maude>>=
in alc-language.maude

view LConcept from TRIV to LALC-SYNTAX is 
 sort Elt to LConcept .
endv

@  

We are now ready to define the Sequent Calculus system. We introduce
the datatypes: [[Sequent]] and [[Goal]]. In that way, a proof is just
a multiset of goal objects. That is, a directed acyclic graph.

<<alc-system.maude>>=
mod SEQUENT-CALCULUS is
 inc LALC-SYNTAX .
 inc SET{LConcept} .
 inc SET{Nat} .
 inc NAT . 
 inc QID .

 sort Sequent .
 op _|-_ : Set{LConcept} Set{LConcept} -> Sequent [ctor prec 122 gather(e e)] .

 sorts Goal State Proof .
 subsort Goal State < Proof .

 op next  : Nat -> State .

 op [_from_by_is_:_] : Nat Nat Qid Nat Sequent -> Goal [format (n d d d d d d d d d d)] .
 op __ : Proof Proof -> Proof [ctor comm assoc] .

 vars ALFA GAMMA : Set{LConcept} .
 vars X Y N : Nat .
 var XS : Set{Nat} .
 vars A B C D : Concept .
 vars R S : Role .
 var Q1 Q2 Q : Qid .
 vars L L1 L2 : List{Label} .

 rl [initial] : 
  [ X from Y by Q is 0 :  ALFA, < L1 | A | L2 > |- < L1 | A | L2 >, GAMMA ] => 
  [ X from Y by Q is 1 :  ALFA, < L1 | A | L2 > |- < L1 | A | L2 >, GAMMA ] .

 rl [and-r] : 
  [ X from Y by Q is 0 :   ALFA |- GAMMA, < L | A & B | nil > ] next(N) => 
  [ X from Y by Q is 1 :   ALFA |- GAMMA, < L | A & B | nil > ] next(N + 2) 
  [ N     from X by 'and-r is 0 :   ALFA |- GAMMA, < L | A | nil > ] 
  [ N + 1 from X by 'and-r is 0 :   ALFA |- GAMMA, < L | B | nil > ] .

 rl [and-l] : 
  [ X from Y by Q is 0 :     ALFA, < L | A & B | nil > |- GAMMA ] next(N) => 
  [ X from Y by Q is 1 :     ALFA, < L | A & B | nil > |- GAMMA ] next(N + 1) 
  [ N from X by 'and-l is 0 : ALFA, < L | A | nil >, < L | B | nil > |- GAMMA ] .

 rl [or-l] : 
  [ X from Y by Q is 0 :  ALFA, < nil | (A | B) | L > |- GAMMA ] next(N) =>
  [ X from Y by Q is 1 :  ALFA, < nil | (A | B) | L > |- GAMMA ] next(N + 2) 
  [ N     from X by 'or-l is 0 :   ALFA, < nil | A | L > |- GAMMA ] 
  [ N + 1 from X by 'or-l is 0 :   ALFA, < nil | B | L > |- GAMMA ] .

 rl [or-r] : 
  [ X from Y by Q is 0 :    ALFA |- GAMMA, < nil | (A | B) | L > ] next(N) => 
  [ X from Y by Q is 1 :    ALFA |- GAMMA, < nil | (A | B) | L > ] next(N + 1) 
  [ N from X by 'or-r is 0 : ALFA |- GAMMA, < nil | A | L >, < nil | B | L > ] .

 rl [forall-r] : 
  [ X from Y by Q is 0 :   ALFA |- GAMMA, < L1 | ALL(R, A) | L2 > ] next(N) => 
  [ X from Y by Q is 1 :   ALFA |- GAMMA, < L1 | ALL(R, A) | L2 > ] next(N + 1) 
  [ N from X by 'forall-r is 0 :  ALFA |- GAMMA, < L1 R | A | L2 > ] .

 rl [forall-l] : 
  [ X from Y by Q is 0 :        ALFA, < L1 | ALL(R, A) | L2 > |- GAMMA ] next(N) => 
  [ X from Y by Q is 1 :        ALFA, < L1 | ALL(R, A) | L2 > |- GAMMA ] next(N + 1) 
  [ N from X by 'forall-l is 0 : ALFA, < L1 R | A | L2 > |- GAMMA ] .

 rl [exist-r] : 
  [ X from Y by Q is 0 :       ALFA |- GAMMA, < L1 | EXIST(R, A) | L2 > ] next(N) => 
  [ X from Y by Q is 1 :       ALFA |- GAMMA, < L1 | EXIST(R, A) | L2 > ] next(N + 1) 
  [ N from X by 'exist-r is 0 : ALFA |- GAMMA, < L1 | A | skl(R, L1) L2 > ] .

 rl [exist-l] : 
  [ X from Y by Q is 0 :       ALFA, < L1 | EXIST(R, A) | L2 > |- GAMMA ] next(N) => 
  [ X from Y by Q is 1 :       ALFA, < L1 | EXIST(R, A) | L2 > |- GAMMA ] next(N + 1) 
  [ N from X by 'exist-l is 0 : ALFA, < L1 | A | skl(R, L1) L2 > |- GAMMA ] .

 rl [neg-l] : 
  [ X from Y by Q is 0 :     ALFA, < L1 | ~ A | L2 >  |- GAMMA ] next(N)  => 
  [ X from Y by Q is 1 :     ALFA, < L1 | ~ A | L2 >  |- GAMMA ] next(N + 1) 
  [ N from X by 'neg-l is 0 : ALFA |- GAMMA, < L1/L2 | A | L2/L1 > ] .

 rl [neg-r] : 
  [ X from Y by Q is 0 :     ALFA |- GAMMA, < L1 | ~ A | L2 > ] next(N) => 
  [ X from Y by Q is 1 :     ALFA |- GAMMA, < L1 | ~ A | L2 > ] next(N + 1) 
  [ N from X by 'neg-r is 0 : ALFA, < L1/L2 | A | L2/L1 > |- GAMMA ] .

endm

@

\section{Testing}

For testing, we create a theory that actually can be viewed as an ontology instantiation. 

<<alc-system-test.maude>>=
mod TESTE is
 inc SEQUENT-CALCULUS .

 ops A B C D E : -> AConcept .
 ops R S T U V : -> ARole .

 ops seq1 seq2 : -> Sequent .
 eq seq1 = lc(nil, ALL(R, ~ (A & B))) |- lc(nil, ALL(R, ~ (A | B))) .
 eq seq2 = lc(nil, ALL(R, A | B)), lc(nil, ALL(S, A | B)) |- lc(nil, EXIST(R, A & B)), lc(nil, EXIST(S, A & B)) .

 ops init1 init2 : -> Goal .
 eq init1 = [ 0 from 0 by 'init is seq1 ] next(1) goals(0) .
 eq init2 = [ 0 from 0 by 'init is seq2 ] next(1) goals(0) .
endm

--- set show command off .
--- rew init .

search init1 =>! P:Proof .

eof

mod TESTE is
 inc SEQUENT-CALCULUS .

 subsorts AConcept ARole < Qid .
endm
@


\section{Conclusion}

Todo.

