
in alc-system.maude 

fmod CHECK-1 is
  inc QID .
  inc NAT .

  sort NQ .
  op [_,_] : Nat Qid -> NQ .
endfm

view NQ from TRIV to CHECK-1 is 
 sort Elt to NQ .
endv

mod CHECK-PROOF is
  inc LALC-SYSTEM-FULL .
  inc SET{NQ} .

  op get-rules : Proof Set{NQ} -> Set{NQ} .

  var L : Set{NQ} .
  var P : Proof .
  
  eq get-rules([ N:Nat from Y:Nat by Q:Qid is S:Sequent] P, L) = 
     get-rules(P, ([N:Nat, Q:Qid], L)) .
 
  eq get-rules(X:Goal P, L)  = get-rules(P, L) .
  eq get-rules(X:State P, L) = get-rules(P, L) .
  eq get-rules(nil, L) = L .
endm


mod TEST-SYSTEM is
 inc CHECK-PROOF .

  ops A B C D E : -> AConcept .
  ops R S T U V : -> ARole .

  ops seq : Nat -> Sequent .
  eq seq(1) = < nil | EXIST(S, ALL(R, A)) | nil > |- < nil | EXIST(S, ALL(R, A)) | nil > .
  eq seq(2) = < nil | ALL(S, EXIST(R, A)) | nil > |- < nil | ALL(S, EXIST(R, A)) | nil > .
  eq seq(3) = < nil | EXIST(R, CTRUE) & ALL(R, ~ EXIST(R, ~ A)) | nil > |- < nil | EXIST(R, ALL(R, A)) | nil > .
  eq seq(4) = < nil | A & B | nil > |- < nil | (A | B) | nil > .
  eq seq(5) = < R | A & B | S > |- < R | (A | B) | S > .
  eq seq(6) = < S | A & B | R >, < R | A & B | S > |- < R | (A | B) | S >, < S | (A | B) | R > . 
  eq seq(7) = < R | A | B | S > |- < R | (A & B) | S > .
  eq seq(8) = < nil | A & ALL(R, C) | nil > |- < nil | B & ALL(S,D) | nil > .
  eq seq(10) = empty |- < nil | EXIST(R, (A | ~ A)) | nil > .

  op start : Nat -> Goal . 
  eq start(N:Nat) = [ 0 from 0 by 'init is seq(N:Nat) ] next(1) goals(0) .

  op child : -> ARole .
  op Doctor : -> AConcept .
  eq seq(9) = < nil | EXIST(child, CTRUE) & ALL(child, ~ EXIST(child, ~ Doctor)) | nil > |- < nil | EXIST(child, ALL(child, Doctor)) | nil > . 
  
endm


eof

search start(9) =>! P:Proof goals(empty) such that [1, 'and-l] in get-rules(P:Proof, empty) /\ 
                                                   [2, 'exist-l] in get-rules(P:Proof, empty) /\ 
                                                   [3, 'forall-l] in get-rules(P:Proof, empty) /\ 
                                                   [4, 'exist-r] in get-rules(P:Proof, empty) /\ 
                                                   [5, 'forall-r] in get-rules(P:Proof, empty) .




