

fmod SYNTAX is 
 inc NAT .

 sorts AConcept Concept ARole Role .
 subsort AConcept < Concept .
 subsort ARole < Role .

 ops ALL EXIST : Role Concept -> Concept .
 ops CTRUE CFALSE : -> AConcept .
 op _&_ : Concept Concept -> Concept [gather (e E) prec 31] .
 op _|_ : Concept Concept -> Concept [gather (e E) prec 32] .
 op ~_  : Concept -> Concept [prec 30] .

 eq ~ CTRUE = CFALSE .
 eq ~ CFALSE = CTRUE .

 ops AT-MOST AT-LEAST : Nat Role Concept -> Concept .
 op INV : Role -> Role .

 var R : Role .
 var C : Concept .

 --- eq AT-LEAST(1, R, C) = EXIST(R, C) .
endfm


fmod LABEL is 
 inc SYNTAX .

 sorts Label ELabel ALabel QLabel .
 subsorts ELabel ALabel QLabel < Label .

 ops gt lt : Nat Role -> QLabel .
 op ex : Role -> ELabel .
 op al : Role -> ALabel .
endfm


view Label from TRIV to LABEL is 
 sort Elt to Label .
endv


fmod LALC-SYNTAX is 
 inc LABEL .
 inc LIST{Label} .

 vars L1 L2 L : List{Label} .
 vars R S : Role .
 var C : Concept .
 var T : Label .
 var n : Nat .

 sorts Expression LConcept FzConcept .
 subsorts LConcept FzConcept < Expression .

 op <_|_> : List{Label} Concept -> LConcept [ctor] . 
 
 op [_,_] : Nat LConcept -> FzConcept .


 --- that is what I actually need to implement
 --- op occurs : Sort List{Label} -> Bool .

 ops has-quant has-lt has-gt : List{Label} -> Bool .
 ops has-al has-ex : List{Label} -> Bool .

 ceq has-quant(T L) = true if (T :: QLabel) .
 eq  has-quant(T L) = has-quant(L) [owise] .
 eq  has-quant(nil) = false .

 ceq has-lt(T L) = true if (T :: QLabel) /\ lt(n, R) := T .
 eq  has-lt(T L) = has-lt(L) [owise] .
 eq  has-lt(nil) = false .

 ceq has-gt(T L) = true if (T :: QLabel) /\ gt(n, R) := T .
 eq  has-gt(T L) = has-gt(L) [owise] .
 eq  has-gt(nil) = false .

 ceq has-ex(T L) = true if (T :: ELabel) .
 eq  has-ex(T L) = has-ex(L) [owise] .
 eq  has-ex(nil) = false .

 ceq has-al(T L) = true if (T :: ALabel) .
 eq  has-al(T L) = has-al(L) [owise] .
 eq  has-al(nil) = false .


 op neg : List{Label} -> List{Label} .
 op neg-aux : List{Label} List{Label} -> List{Label} .

 eq neg(L1) = neg-aux(L1, nil) .

 eq neg-aux(L1 al(R), L2) = neg-aux(L1, ex(R) L2) .
 eq neg-aux(L1 ex(R), L2) = neg-aux(L1, al(R) L2) .
 eq neg-aux(nil, L2) = L2 .

endfm


view Expression from TRIV to LALC-SYNTAX is 
 sort Elt to Expression .
endv


fmod SEQUENT-CALCULUS is
 inc LALC-SYNTAX .
 inc SET{Expression} .
 inc SET{Label} .
 inc SET{Nat} .
 inc NAT . 
 inc QID .

 sort Sequent .

 sorts Goal State Proof .
 subsort Goal State < Proof .

 op next  : Nat -> State .
 op goals : Set{Nat} -> State .

 op [_from_by_is_] : Nat Nat Qid Sequent -> Goal [format (n d d d d d d d d d)] .
 op nil : -> Proof [ctor] .
 op __ : Proof Proof -> Proof [ctor comm assoc] .

 op _|-_ : Set{Expression} Set{Expression} -> Sequent [ctor prec 122 gather(e e)] .
 op _:_|-_:_ : Set{Expression} Set{Expression} Set{Expression} Set{Expression} -> Sequent [ctor prec 122 gather(e e e e)] .
 
endfm 



mod LALCQ-SYSTEM is 
 inc SEQUENT-CALCULUS .
 inc INT .

 vars ALFA GAMMA : Set{Expression} .
 vars X Y N M : Nat .
 var XS : Set{Nat} .
 vars A B C D : Concept .
 vars R S : Role .
 var E : Expression .
 var AT : AConcept .
 var Q : Qid .
 vars L L1 L2 L3 L4 : List{Label} .

 --- como lidar com regras nao deterministicas? m > n sss inc em um, controle de aplicacoes

 rl [initial] : 
   [ X from Y by Q is ALFA, < nil | AT > |- < nil | AT >, GAMMA ] goals((X, XS))  => 
   [ X from Y by Q is ALFA, < nil | AT > |- < nil | AT >, GAMMA ] goals((XS))  .

 crl [initial] : 
   [ X from Y by Q is ALFA, < lt(n,R) L | A > |- < lt(m,R) L | A  >, GAMMA ] goals((X, XS))  => 
   [ X from Y by Q is ALFA, < lt(n,R) L | A > |- < lt(m,R) L | A  >, GAMMA ] goals((XS)) 
  if n <= m .

 crl [initial] : 
   [ X from Y by Q is ALFA, < gt(n,R) L | A > |- < gt(m,R) L | A >, GAMMA ] goals((X, XS))  => 
   [ X from Y by Q is ALFA, < gt(n,R) L | A > |- < gt(m,R) L | A >, GAMMA ] goals((XS)) 
  if m <= n .


 rl [weak-l] : 
  [ X from Y by Q is      ALFA, E |- GAMMA ] next(N) goals((X, XS)) => 
  [ X from Y by Q is      ALFA, E |- GAMMA ] next(N + 1) goals((XS, N)) 
  [ N from X by 'weak-l is ALFA |- GAMMA ] .

 rl [weak-r] : 
  [ X from Y by Q is      ALFA |- GAMMA, E ] next(N) goals((X, XS)) => 
  [ X from Y by Q is      ALFA |- GAMMA, E ] next(N + 1) goals((XS, N)) 
  [ N from X by 'weak-r is ALFA |- GAMMA ] .


 rl [forall-r] : 
   [ X from Y by Q is    ALFA |- GAMMA, < L1 | ALL(R, A) > ] next(N) goals((X, XS)) => 
   [ X from Y by Q is    ALFA |- GAMMA, < L1 | ALL(R, A) > ] next(N + 1) goals((XS, N))
   [ N from X by 'forall-r is   ALFA |- GAMMA, < L1 al(R) | A > ] .

 rl [forall-l] : 
   [ X from Y by Q is    ALFA, < L1 | ALL(R, A) > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is    ALFA, < L1 | ALL(R, A) > |- GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'forall-l is  ALFA, < L1 al(R) | A > |- GAMMA ] .

 rl [exist-r] : 
   [ X from Y by Q is    ALFA |- GAMMA, < L1 | EXIST(R, A) > ] next(N) goals((X, XS)) => 
   [ X from Y by Q is    ALFA |- GAMMA, < L1 | EXIST(R, A) > ] next(N + 1) goals((XS, N)) 
   [ N from X by 'exist-r is ALFA |- GAMMA, < L1 ex(R) | A > ] .

 rl [exist-l] : 
   [ X from Y by Q is    ALFA, < L1 | EXIST(R, A) > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is    ALFA, < L1 | EXIST(R, A) > |- GAMMA ] next(N + 1) goals((XS, N))
   [ N from X by 'exist-l is   ALFA, < L1 ex(R) | A > |- GAMMA ] .


 rl [least-l] : 
   [ X from Y by Q is  ALFA, < L1 | AT-LEAST(M, R, A) > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA, < L1 | AT-LEAST(M, R, A) > |- GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'least-l is  ALFA, < L1 gt(M,R) | A > |- GAMMA ] .

 rl [least-r] : 
   [ X from Y by Q is  ALFA |- < L1 | AT-LEAST(M, R, A) >, GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA |- < L1 | AT-LEAST(M, R, A) >, GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'least-r is  ALFA |- < L1 gt(M,R) | A >, GAMMA ] .

 rl [most-l] : 
   [ X from Y by Q is  ALFA, < L1 | AT-MOST(M, R, A) > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA, < L1 | AT-MOST(M, R, A) > |- GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'most-l is  ALFA, < L1 lt(M,R) | A > |- GAMMA ] .

 rl [most-r] : 
   [ X from Y by Q is  ALFA |- < L1 | AT-MOST(M, R, A) >, GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA |- < L1 | AT-MOST(M, R, A) >, GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'most-r is  ALFA |- < L1 lt(M,R) | A >, GAMMA ] .



 crl [neg-l] : 
   [ X from Y by Q is  ALFA, < L1 | ~ A >  |- GAMMA ] next(N)  goals((X, XS)) => 
   [ X from Y by Q is  ALFA, < L1 | ~ A >  |- GAMMA ] next(N + 1) goals((XS, N))
   [ N from X by 'neg-l is ALFA |- GAMMA, < neg(L1) | A > ] 
  if not has-quant(L1) .

 crl [neg-r] : 
   [ X from Y by Q is    ALFA |- GAMMA, < L1 | ~ A > ] next(N) goals((X, XS)) => 
   [ X from Y by Q is    ALFA |- GAMMA, < L1 | ~ A > ] next(N + 1) goals((XS, N))
   [ N from X by 'neg-r is ALFA, < neg(L1) | A > |- GAMMA ] 
  if not has-quant(L1) .

 vars m n : Nat .

 rl [quant-exist-l] : 
   [ X from Y by Q is  ALFA, < ex(R) L1 | A > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA, < ex(R) L1 | A > |- GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'quant-exist-l is  ALFA, < gt(1,R) L1 | A > |- GAMMA ] .

 --- or gt(n,R) where n >= 1
 rl [quant-exist-r] : 
   [ X from Y by Q is  ALFA |- < ex(R) L1 | A >, GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA |- < ex(R) L1 | A >, GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'quant-exist-r is  ALFA |- < gt(1,R) L1 | A >, GAMMA ] .

 crl [exist-quant-l] : 
   [ X from Y by Q is  ALFA, < gt(n,R) L1 | A > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA, < gt(n,R) L1 | A > |- GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'exist-quant-l is  ALFA, < ex(R) L1 | A > |- GAMMA ] 
  if n >= 1 .

 rl [exist-quant-r] : 
   [ X from Y by Q is  ALFA |- < gt(1,R) L1 | A >, GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA |- < gt(1,R) L1 | A >, GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'exist-quant-r is  ALFA |- < ex(R) L1 | A >, GAMMA ] .


 crl [quant-gt-l] : 
   [ X from Y by Q is  ALFA, < gt(m,R) L1 | A > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA, < gt(m,R) L1 | A > |- GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'quant-qt-r is  ALFA, < gt((m - 1), R) L1 | A > |- GAMMA ] 
  if m > 1 .

 rl [quant-gt-r] : 
   [ X from Y by Q is  ALFA |- < gt(m,R) L1 | A >, GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA |- < gt(m,R) L1 | A >, GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'quant-qt-r is  ALFA |- < gt((m + 1), R) L1 | A >, GAMMA ] .


 rl [quant-lt-l] : 
   [ X from Y by Q is  ALFA, < lt(m,R) L1 | A > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA, < lt(m,R) L1 | A > |- GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'quant-lt-r is  ALFA, < lt((m + 1), R) L1 | A > |- GAMMA ] .

 crl [quant-lt-r] : 
   [ X from Y by Q is  ALFA |- < lt(m,R) L1 | A >, GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is  ALFA |- < lt(m,R) L1 | A >, GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'quant-lt-r is  ALFA |- < lt((m - 1), R) L1 | A >, GAMMA ] 
  if m > 1 .


 crl [and-r] : 
   [ X     from Y by Q is ALFA |- GAMMA, < L | A & B > ] next(N) goals((X, XS)) => 
   [ X     from Y by Q is ALFA |- GAMMA, < L | A & B > ] next(N + 2) goals((XS, N, N + 1))  
   [ N     from X by 'and-r is ALFA |- GAMMA, < L | A > ] 
   [ N + 1 from X by 'and-r is ALFA |- GAMMA, < L | B > ] 
  if not has-ex(L) /\ not has-gt(L) .

 crl [and-l] : 
   [ X from Y by Q is      ALFA, < L | A & B > |- GAMMA ] next(N) goals((X, XS)) => 
   [ X from Y by Q is      ALFA, < L | A & B > |- GAMMA ] next(N + 1) goals((XS, N)) 
   [ N from X by 'and-l is ALFA, < L | A >, < L | B > |- GAMMA ] 
  if not has-ex(L) /\ not has-lt(L) .


  crl [or-l] : 
    [ X     from Y by Q is  ALFA, < L | (A | B) > |- GAMMA ] next(N) goals((X, XS)) =>
    [ X     from Y by Q is  ALFA, < L | (A | B) > |- GAMMA ] next(N + 2) goals((XS, N, N + 1))
    [ N     from X by 'or-l is  ALFA, < L | A > |- GAMMA ] 
    [ N + 1 from X by 'or-l is  ALFA, < L | B > |- GAMMA ] 
   if not has-al(L) /\ not has-gt(L) .

  crl [or-r] : 
    [ X from Y by Q is     ALFA |- GAMMA, < L | (A | B) > ] next(N) goals((X, XS)) => 
    [ X from Y by Q is     ALFA |- GAMMA, < L | (A | B) > ] next(N + 1) goals((XS, N))
    [ N from X by 'or-r is  ALFA |- GAMMA, < L | A >, < L | B > ] 
   if not has-al(L) /\ not has-lt(L) .


  op all-label    : Set{Expression} Label -> Bool .
  op remove-label : Set{Expression} Label Set{Expression} -> Set{Expression} .
  
  vars ALFA' GAMMA' : Set{Expression} .
  var LBL : Label .
      
  eq all-label((< LBL L | A >, GAMMA), LBL) = 
     all-label(GAMMA, LBL) .
   
  eq all-label(empty, LBL) = true . 
  eq all-label(GAMMA, LBL) = false [owise] .

  eq remove-label((< LBL L | A >, GAMMA), LBL, GAMMA') = 
     remove-label(GAMMA, LBL, (GAMMA', < L | A >)) .

  eq remove-label(empty, LBL, GAMMA) = GAMMA .
     
  crl [prom-exist] : 
   [ X from Y by Q is    < ex(R) L | A > |- GAMMA ] next(N)     goals((X, XS)) => 
   [ X from Y by Q is    < ex(R) L | A > |- GAMMA ] next(N + 1) goals((XS, N))
   [ N from X by 'prom-exist is  < L | A > |- GAMMA' ] 
  if all-label(GAMMA, ex(R)) = true /\ 
     GAMMA' := remove-label(GAMMA, ex(R), empty) .

  crl [prom-all] : 
   [ X from Y by Q is    ALFA |- < al(R) L | A > ] next(N)     goals((X, XS)) => 
   [ X from Y by Q is    ALFA |- < al(R) L | A > ] next(N + 1) goals((XS, N))
   [ N from X by 'prom-all is  ALFA' |- < L | A >  ] 
  if all-label(ALFA, al(R)) = true /\ 
     ALFA' := remove-label(ALFA, al(R), empty) .


  crl [prom-gt-l] : 
   [ X from Y by Q is    < gt(n,R) L | A > |- GAMMA ] next(N)     goals((X, XS)) => 
   [ X from Y by Q is    < gt(n,R) L | A > |- GAMMA ] next(N + 1) goals((XS, N))
   [ N from X by 'prom-gt-l is  < L | A > |- GAMMA' ] 
  if all-label(GAMMA, gt(n,R)) = true /\ 
     GAMMA' := remove-label(GAMMA, gt(n,R), empty) .

  crl [prom-gt-r] : 
   [ X from Y by Q is    ALFA |- < gt(n,R) L | A > ] next(N)     goals((X, XS)) => 
   [ X from Y by Q is    ALFA |- < gt(n,R) L | A > ] next(N + 1) goals((XS, N))
   [ N from X by 'prom-gt-r is  ALFA' |- < L | A >  ] 
  if all-label(ALFA, gt(n,R)) = true /\ 
     ALFA' := remove-label(ALFA, gt(n,R), empty) .

endm
